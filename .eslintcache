[{"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\index.tsx":"1","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\code-editor.tsx":"2","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\preview.tsx":"3","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\index.ts":"4","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\plugins\\unpkg-path-plugin.ts":"5","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\plugins\\fetch-plugin.ts":"6","D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\code-cell.tsx":"7"},{"size":315,"mtime":1670324969818,"results":"8","hashOfConfig":"9"},{"size":2333,"mtime":1670322800830,"results":"10","hashOfConfig":"9"},{"size":931,"mtime":1670323816407,"results":"11","hashOfConfig":"9"},{"size":805,"mtime":1670324700498,"results":"12","hashOfConfig":"9"},{"size":856,"mtime":1670303474206,"results":"13","hashOfConfig":"9"},{"size":2004,"mtime":1670227173488,"results":"14","hashOfConfig":"9"},{"size":647,"mtime":1670324887334,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kgx7o6",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\index.tsx",[],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\code-editor.tsx",["32"],"import './code-editor.css'\r\nimport './syntax.css'\r\nimport { useRef } from 'react'\r\nimport ManacoEditor, { EditorDidMount, monaco } from '@monaco-editor/react';\r\nimport prettier from 'prettier';\r\nimport parser from 'prettier/parser-babel'\r\nimport codeShift from 'jscodeshift';\r\nimport Highlighter from 'monaco-jsx-highlighter';\r\n\r\n\r\ninterface CodeEditorProps {\r\n  initialValue: string;\r\n  onChange(value: string): void\r\n}\r\n\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\r\n  const editorRef = useRef<any>()\r\n\r\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\r\n    editorRef.current = monacoEditor\r\n    monacoEditor.onDidChangeModelContent(() => {\r\n      onChange(getValue())\r\n    })\r\n\r\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 })\r\n\r\n    const highlighter = new Highlighter(\r\n      // @ts-ignore //ignore type check\r\n      window.monaco,\r\n      codeShift,\r\n      monacoEditor\r\n    )\r\n    highlighter.highLightOnDidChangeModelContent(\r\n      () => { },\r\n      () => { },\r\n      undefined,\r\n      () => { },\r\n    )\r\n\r\n  }\r\n\r\n  const onFormatClick = () => {\r\n    console.log(editorRef.current)\r\n    // get current value form editor\r\n    const unformatted = editorRef.current.getModel().getValue()\r\n    // format the value\r\n    const formatted = prettier.format(unformatted, {\r\n      parser: 'babel',\r\n      plugins: [parser],\r\n      useTabs: false,\r\n      semi: true,\r\n      singleQuote: true\r\n    }).replace(/\\n$/, '') //get rid of the extra new line after formatted\r\n\r\n    // set the formatted value back in the editor\r\n    editorRef.current.setValue(formatted)\r\n  }\r\n\r\n  return (\r\n    <div className='editor-wrapper'>\r\n      <button\r\n        className='button button-format is-primary is-small'\r\n        onClick={onFormatClick}>Format</button>\r\n\r\n      <ManacoEditor\r\n        editorDidMount={onEditorDidMount}\r\n        value={initialValue}\r\n        theme='dark'\r\n        language='javascript'\r\n        height=\"500px\"\r\n        options={{\r\n          wordWrap: 'on',\r\n          minimap: { enabled: false },\r\n          showUnused: false,\r\n          folding: false,\r\n          lineNumbersMinChars: 3,\r\n          fontSize: 16,\r\n          scrollBeyondLastLine: false,\r\n          automaticLayout: true\r\n        }}\r\n      />\r\n\r\n    </div>)\r\n}\r\n\r\nexport default CodeEditor;",["33","34"],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\preview.tsx",[],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\index.ts",[],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\plugins\\unpkg-path-plugin.ts",[],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\bundler\\plugins\\fetch-plugin.ts",[],"D:\\Users\\ymw03\\Desktop\\react-ts-code-editor\\src\\components\\code-cell.tsx",[],{"ruleId":"35","severity":1,"message":"36","line":4,"column":40,"nodeType":"37","messageId":"38","endLine":4,"endColumn":46},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"@typescript-eslint/no-unused-vars","'monaco' is defined but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]